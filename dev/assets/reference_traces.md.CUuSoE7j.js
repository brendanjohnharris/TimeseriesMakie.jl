import{_ as d,C as a,c as s,o as n,j as o,aA as r,G as c,a as i,w as l}from"./chunks/framework.BNzOsuFj.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reference/traces.md","filePath":"reference/traces.md","lastUpdated":null}'),p={name:"reference/traces.md"},h={class:"jldocstring custom-block",open:""};function g(u,e,f,m,b,k){const t=a("Badge");return n(),s("div",null,[o("details",h,[o("summary",null,[e[0]||(e[0]=o("a",{id:"TimeseriesMakie.traces",href:"#TimeseriesMakie.traces"},[o("span",{class:"jlbinding"},"TimeseriesMakie.traces")],-1)),e[1]||(e[1]=i()),c(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">traces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, Z; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot the columns of <code>Z</code> over the domain <code>x</code>, colored by <code>y</code>.</p><p><strong>Key attributes:</strong></p><ul><li><p><code>linecolor</code> = <code>automatic</code>: Sets the color of the traces.</p></li><li><p><code>spacing</code> = <code>0</code>: The spacing between traces.</p></li></ul><p>Can be a number in data space, or one of the following modes: - <code>:even</code>: Even spacing equal to the greatest difference between traces. - <code>:close</code>: Successive traces are spaced by the smallest difference between them.</p><ul><li><code>offset</code> = <code>1</code>: The offset factor (offset * spacing)</li></ul><p><strong>Plot type</strong></p><p>The plot type alias for the <code>traces</code> function is <code>Traces</code>.</p><p><strong>Attributes</strong></p><p><strong><code>alpha</code></strong> = <code>1.0</code> — The alpha value of the colormap or color attribute. Multiple alphas like in <code>plot(alpha=0.2, color=(:red, 0.5)</code>, will get multiplied.</p><p><strong><code>clip_planes</code></strong> = <code>@inherit clip_planes automatic</code> — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 <code>Plane3f</code> planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent <code>clip_planes</code> by passing <code>Plane3f[]</code>.</p><p><strong><code>colormap</code></strong> = <code>@inherit colormap :viridis</code> — Sets the colormap that is sampled for numeric <code>color</code>s. <code>PlotUtils.cgrad(...)</code>, <code>Makie.Reverse(any_colormap)</code> can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call <code>Makie.available_gradients()</code>.</p><p><strong><code>colorrange</code></strong> = <code>automatic</code> — The values representing the start and end points of <code>colormap</code>.</p><p><strong><code>colorscale</code></strong> = <code>identity</code> — The color transform function. Can be any function, but only works well together with <code>Colorbar</code> for <code>identity</code>, <code>log</code>, <code>log2</code>, <code>log10</code>, <code>sqrt</code>, <code>logit</code>, <code>Makie.pseudolog10</code>, <code>Makie.Symlog10</code>, <code>Makie.AsinhScale</code>, <code>Makie.SinhScale</code>, <code>Makie.LogScale</code>, <code>Makie.LuptonAsinhScale</code>, and <code>Makie.PowerScale</code>.</p><p><strong><code>cycle</code></strong> = <code>[:color]</code> — Sets which attributes to cycle when creating multiple plots.</p><p><strong><code>depth_shift</code></strong> = <code>0.0</code> — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where <code>-1 &lt;= depth &lt;= 1</code>. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).</p><p><strong><code>fxaa</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).</p><p><strong><code>highclip</code></strong> = <code>automatic</code> — The color for any value above the colorrange.</p><p><strong><code>inspectable</code></strong> = <code>@inherit inspectable</code> — Sets whether this plot should be seen by <code>DataInspector</code>. The default depends on the theme of the parent scene.</p><p><strong><code>inspector_clear</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot) -&gt; ...</code> for cleaning up custom indicators in DataInspector.</p><p><strong><code>inspector_hover</code></strong> = <code>automatic</code> — Sets a callback function <code>(inspector, plot, index) -&gt; ...</code> which replaces the default <code>show_data</code> methods.</p><p><strong><code>inspector_label</code></strong> = <code>automatic</code> — Sets a callback function <code>(plot, index, position) -&gt; string</code> which replaces the default label generated by DataInspector.</p><p><strong><code>joinstyle</code></strong> = <code>@inherit joinstyle</code> — Controls the rendering at corners. Options are <code>:miter</code> for sharp corners, <code>:bevel</code> for &quot;cut off&quot; corners, and <code>:round</code> for rounded corners. If the corner angle is below <code>miter_limit</code>, <code>:miter</code> is equivalent to <code>:bevel</code> to avoid long spikes.</p><p><strong><code>linecap</code></strong> = <code>@inherit linecap</code> — Sets the type of line cap used. Options are <code>:butt</code> (flat without extrusion), <code>:square</code> (flat with half a linewidth extrusion) or <code>:round</code>.</p><p><strong><code>linecolor</code></strong> = <code>automatic</code> — <em>No docs available.</em></p><p><strong><code>linestyle</code></strong> = <code>nothing</code> — Sets the dash pattern of the line. Options are <code>:solid</code> (equivalent to <code>nothing</code>), <code>:dot</code>, <code>:dash</code>, <code>:dashdot</code> and <code>:dashdotdot</code>. These can also be given in a tuple with a gap style modifier, either <code>:normal</code>, <code>:dense</code> or <code>:loose</code>. For example, <code>(:dot, :loose)</code> or <code>(:dashdot, :dense)</code>.</p><p>For custom patterns have a look at <a href="/TimeseriesMakie.jl/dev/reference/trajectory#Makie.Linestyle"><code>Makie.Linestyle</code></a>.</p><p><strong><code>linewidth</code></strong> = <code>@inherit linewidth</code> — Sets the width of the line in screen units</p><p><strong><code>lowclip</code></strong> = <code>automatic</code> — The color for any value below the colorrange.</p><p><strong><code>miter_limit</code></strong> = <code>@inherit miter_limit</code> — Sets the minimum inner join angle below which miter joins truncate. See also <code>Makie.miter_distance_to_angle</code>.</p><p><strong><code>model</code></strong> = <code>automatic</code> — Sets a model matrix for the plot. This overrides adjustments made with <code>translate!</code>, <code>rotate!</code> and <code>scale!</code>.</p><p><strong><code>nan_color</code></strong> = <code>:transparent</code> — The color for NaN values.</p><p><strong><code>offset</code></strong> = <code>1</code> — <em>No docs available.</em></p><p><strong><code>overdraw</code></strong> = <code>false</code> — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends</p><p><strong><code>space</code></strong> = <code>:data</code> — Sets the transformation space for box encompassing the plot. See <code>Makie.spaces()</code> for possible inputs.</p><p><strong><code>spacing</code></strong> = <code>0</code> — <em>No docs available.</em></p><p><strong><code>ssao</code></strong> = <code>false</code> — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with <code>fxaa = true</code>.</p><p><strong><code>transformation</code></strong> = <code>:automatic</code> — <em>No docs available.</em></p><p><strong><code>transparency</code></strong> = <code>false</code> — Adjusts how the plot deals with transparency. In GLMakie <code>transparency = true</code> results in using Order Independent Transparency.</p><p><strong><code>visible</code></strong> = <code>true</code> — Controls whether the plot will be rendered or not.</p>',40)),c(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>e[2]||(e[2]=[o("a",{href:"https://github.com/MakieOrg/Makie.jl/blob/v0.24.6/src/recipes.jl#L527-L623",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})])])}const v=d(p,[["render",g]]);export{w as __pageData,v as default};
